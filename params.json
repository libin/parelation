{"name":"Parelation","tagline":"","body":"# Parelation\r\n\r\n[![Gem Version](https://badge.fury.io/rb/parelation.svg)](http://badge.fury.io/rb/parelation)\r\n[![Code Climate](https://codeclimate.com/github/meskyanichi/parelation.png)](https://codeclimate.com/github/meskyanichi/parelation)\r\n[![Build Status](https://travis-ci.org/meskyanichi/parelation.svg)](https://travis-ci.org/meskyanichi/parelation)\r\n\r\nParelation, for Rails/ActiveRecord 4.1.0+, allows you to query your ActiveRecord-mapped database easily, securely and quite flexibly using simple GET requests. It's used in your controller layer where it uses HTTP GET parameters to build on the ActiveRecord::Relation chain. This provides the client-side with the out-of-the-box flexibility to perform fairly dynamic queries without having to write boilerplate on the server.\r\n\r\nThis library was developed for- and extracted from [HireFire].\r\n\r\nThe documentation can be found on [RubyDoc].\r\n\r\n### Compatibility\r\n\r\n- Rails/ActiveRecord 4.1.0+\r\n- Ruby (MRI) 2.0+\r\n- Ruby (RBX) 2.2+\r\n\r\n### Installation\r\n\r\nAdd the gem to your Gemfile and run `bundle`.\r\n\r\n```rb\r\ngem \"parelation\"\r\n```\r\n\r\n*This library won't be hosted on RubyGems.org until it's been tested more in development.*\r\n\r\n### Example\r\n\r\nHere's an example to get an idea of how it works. We'll fetch the `50` most recently created and `open` tickets, and we only want their `id`, `name` and `message` attributes.\r\n\r\n```js\r\nvar params = {\r\n  \"select[]\": [\"id\", \"name\", \"message\"],\r\n  \"where[state]\": \"open\",\r\n  \"order\": \"created_at:desc\",\r\n  \"limit\": \"50\"\r\n}\r\n\r\n$.get(\"https://api.ticket.app/tickets\", params, function(tickets){\r\n  console.log(\"Just fetched the 50 most recent and open tickets.\")\r\n  $.each(tickets, function(ticket){\r\n    console.log(\"Ticket \" + ticket.name + \" loaded!\")\r\n  })\r\n})\r\n```\r\n\r\nSimply include `Parelation::Helpers` and use the `parelate` method. This will ensure that the provided parameters are converted and applied to the `Ticket.all` criteria chain.\r\n\r\n```rb\r\nclass Api::V1::TicketsController < ApplicationController\r\n  include Parelation::Helpers\r\n\r\n  def index\r\n    render json: parelate(Ticket.all)\r\n  end\r\nend\r\n```\r\n\r\nYou can also scope results to the `current_user`:\r\n\r\n```rb\r\nclass Api::V1::TicketsController < ApplicationController\r\n  include Parelation::Helpers\r\n\r\n  def index\r\n    render json: parelate(current_user.tickets)\r\n  end\r\nend\r\n```\r\n\r\nUsing the same JavaScript, this'll now fetch the 50 most recent open tickets scoped to the `current_user`.\r\n\r\n\r\n### Parameter List (Reference)\r\n\r\nHere follows a list of all possible query syntaxes. We'll assume we have a Ticket model to query on.\r\n\r\n#### Select\r\n\r\n```\r\n/tickets?select[]=id&select[]=name&select[]=message\r\n```\r\n\r\nTranslates to:\r\n\r\n```rb\r\nTicket.select(:id, :name, :message)\r\n```\r\n\r\n#### Where\r\n\r\n```\r\n/tickets?where[state]=open\r\n```\r\n\r\nTranslates to:\r\n\r\n```rb\r\nTicket.where(state: \"open\")\r\n```\r\n\r\nYou can also specify multiple multiple conditions:\r\n\r\n```\r\n/tickets?where[state][]=open&where[state][]=pending\r\n```\r\n\r\nTranslates to:\r\n\r\n```rb\r\nTicket.where(state: [\"open\", \"pending\"])\r\n```\r\n\r\n#### Where (directional)\r\n\r\n* `where_gt` (greater than `>`)\r\n* `where_gte` (greater than or equal to `>=`)\r\n* `where_lt` (less than `<`)\r\n* `where_lte` (less than or equal to `<=`)\r\n\r\n```\r\n/tickets?where_gt[created_at]=2014-01-01T00:00:00Z\r\n```\r\n\r\nTranslates to:\r\n\r\n```rb\r\nTicket.where(\"'tickets'.'created_at' > '2014-01-01 00:00:00.000000'\")\r\n```\r\n\r\nYou can also specify multiple conditions:\r\n\r\n```\r\n/tickets?where_gt[created_at]=2014-01-01T00:00:00Z&where_gt[updated_at]=2014-01-01T00:00:00Z\r\n```\r\n\r\nTranslates to:\r\n\r\n```rb\r\nTicket\r\n  .where(\"'tickets'.'created_at' > '2014-01-01 00:00:00.000000'\")\r\n  .where(\"'tickets'.'updated_at' > '2014-01-01 00:00:00.000000'\")\r\n```\r\n\r\n#### Query\r\n\r\n```\r\n/tickets?query[memory leak]=name\r\n```\r\n\r\nTranslates to:\r\n\r\n```rb\r\nTicket.where(\"'tickets'.'name' LIKE '%memory leak%'\")\r\n```\r\n\r\nYou can also specify multiple columns to scan:\r\n\r\n```\r\n/tickets?query[memory leak]=name&query[memory leak]=message\r\n```\r\n\r\nTranslates to:\r\n\r\n```rb\r\nTicket.where(\"(\r\n  'tickets'.'name' LIKE '%memory leak%' OR\r\n  'tickets'.'message' LIKE '%memory leak%'\r\n)\")\r\n```\r\n\r\n#### Order\r\n\r\n```\r\n/tickets?order=created_at:desc\r\n```\r\n\r\nTranslates to:\r\n\r\n```rb\r\nTicket.order(created_at: :desc)\r\n```\r\n\r\nYou can also specify multiple order-operations:\r\n\r\n```\r\n/tickets?order[]=created_at:desc&order[]=name:asc\r\n```\r\n\r\nTranslates to:\r\n\r\n```rb\r\nTicket.order(created_at: :desc, name: :asc)\r\n```\r\n\r\n#### Limit\r\n\r\n```\r\n/tickets?limit=50\r\n```\r\n\r\nTranslates to:\r\n\r\n```rb\r\nTicket.limit(50)\r\n```\r\n\r\n#### Offset\r\n\r\n```\r\n/tickets?offset=25\r\n```\r\n\r\nTranslates to:\r\n\r\n```rb\r\nTicket.offset(25)\r\n```\r\n\r\n\r\n### Error Handling\r\n\r\nWhen invalid parameters were sent, you can rescue the exception and return a message to the client.\r\n\r\n```rb\r\nclass Api::V1::TicketsController < ApplicationController\r\n  include Parelation::Helpers\r\n\r\n  def index\r\n    render json: parelate(Ticket.all)\r\n  rescue Parelation::Errors::Parameter => error\r\n    render json: { error: error }, status: :bad_request\r\n  end\r\nend\r\n```\r\n\r\nThis will tell client developers what parameter failed in the HTTP response. This exception generally occurs when there is a typo in the URL's parameters. Knowing which parameter failed (described in `error`) helps narrowing down the issue.\r\n\r\n\r\n### Contributing\r\n\r\nContributions are welcome, but please conform to these requirements:\r\n\r\n- Ruby (MRI) 2.0+\r\n- Ruby (RBX) 2.2+\r\n- ActiveRecord 4.1.0+\r\n- 100% Spec Coverage\r\n  - Generated by when running the test suite\r\n- 100% [Passing Specs]\r\n  - Run test suite with `$ rspec spec`\r\n- 4.0 [Code Climate Score]\r\n  - Run `$ rubycritic lib` to generate the score locally and receive tips\r\n  - No code smells\r\n  - No duplication\r\n\r\nTo start contributing, fork the project, clone it, and install the development dependencies:\r\n\r\n```\r\ngit clone git@github.com:USERNAME/parelation.git\r\ncd parelation\r\nbundle\r\n```\r\n\r\nEnsure that everything works:\r\n\r\n```\r\nrspec spec\r\nrubycritic lib\r\n```\r\n\r\nCreate a new branch and start hacking:\r\n\r\n```\r\ngit checkout -b my-contributions\r\n```\r\n\r\nSubmit a pull request.\r\n\r\n\r\n### Author / License\r\n\r\nCopyright (c) 2014 Michael van Rooijen ( [@meskyanichi] )<br />\r\nReleased under the MIT [License].\r\n\r\n[@meskyanichi]: https://twitter.com/meskyanichi\r\n[HireFire]: http://hirefire.io\r\n[Passing Specs]: https://travis-ci.org/meskyanichi/parelation\r\n[Code Climate Score]: https://codeclimate.com/github/meskyanichi/parelation\r\n[RubyDoc]: http://rubydoc.info/github/meskyanichi/parelation/master/frames\r\n[License]: https://github.com/meskyanichi/parelation/blob/master/LICENSE\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}